import telebot
from telebot import types

from functions import *


bot = telebot.TeleBot("11111111111111")
age, height, weight, gender, coefficient, mini_cal = 0, 0, 0, 0, 0, 0
base, norm, protein, fiber, carbs = 0, [0]*3, [0]*3, [0]*3, [0]*3

@bot.message_handler(commands=['start'])
def start(message):
    markup = create_initial_buttons()
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!\n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.ü¶æ –ú–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞ –∏–ª–∏ —Ä–∞—Å–∫–∞–∑–∞—Ç—å –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö\n–ù–∞–∂–∏–º–∞–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å', reply_markup=markup)

def create_initial_buttons():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞', callback_data='start')
    btn2 = types.InlineKeyboardButton('–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤', callback_data='nutrient')
    markup.add(btn1, btn2)
    return markup

def get_age(message):
    global age
    try:
        age = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ª–µ—Ç!!!')
        bot.register_next_step_handler(message, get_age)
    else:
        if age <= 120:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Ä–æ—Å—Ç –≤ —Å–º.')
            bot.register_next_step_handler(message, get_height)
        else:
            bot.send_message(message.chat.id, '–ù—É –∏ –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—å!!! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ-–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç 120 –ª–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥.')
            bot.register_next_step_handler(message, get_age)


def get_height(message):
    global height
    try:
        height = float(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!!!')
        bot.register_next_step_handler(message, get_height)
    else:
        if (70<= height <= 300):
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –≤–µ—Å –≤ –∫–≥.')
            bot.register_next_step_handler(message, get_weight)
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ 70-300 —Å–º.')
            bot.register_next_step_handler(message, get_height)

def get_weight(message):
    global weight
    try:
        weight = float(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!!!')
        bot.register_next_step_handler(message, get_weight)
    else:
        if 5 <= weight <= 200:
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn1 = types.InlineKeyboardButton('–∂–µ–Ω—Å–∫–∏–π', callback_data='female')
            btn2 = types.InlineKeyboardButton('–º—É–∂—Å–∫–æ–π', callback_data='male')
            markup.add(btn1, btn2)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø–æ–ª', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ 5-200 –∫–≥.')
            bot.register_next_step_handler(message, get_weight)



@bot.callback_query_handler(func = lambda call: call.data.endswith('male'))
def get_gender(call):
    global gender
    if call.data == 'female':
        gender = -161
    else:
        gender = 5

    markup = types.InlineKeyboardMarkup(row_width=1, )
    btn1 = types.InlineKeyboardButton('–ù–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫', callback_data='activ_1.2')
    btn2 = types.InlineKeyboardButton('–õ—ë–≥–∫–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–≥—É–ª–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è', callback_data='activ_1.375')
    btn3 = types.InlineKeyboardButton('–•–æ—Ä–æ—à–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data='activ_1.46')
    btn4 = types.InlineKeyboardButton('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø—Ä–æ–≥—É–ª–∫–∏, —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥ 5-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data='activ_1.55')
    btn5 = types.InlineKeyboardButton('–í—ã—Å–æ–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data='activ_1.725')
    btn6 = types.InlineKeyboardButton('–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã –≤ –ø–µ—Ä–∏–æ–¥ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', callback_data='1.9')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', reply_markup=markup)



@bot.callback_query_handler(func = lambda call: call.data.startswith('activ'))
def calculate_calorie_base(call):
    global coefficient, base, protein, fiber, carbs, mini_cal
    coefficient = float(call.data.split('_')[-1])
    mini_cal = round(10 * weight + 6.25 * height - 5 * age + gender, 2)
    base = round(mini_cal * coefficient, 2)
    protein[0] = round(weight * 0.8, 2)
    fiber[0] = round(weight * 0.8, 2)
    carbs[0] = round(weight * 2, 2)
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton('–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
                                      callback_data='weight_loss')
    btn2 = types.InlineKeyboardButton('–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
                                      callback_data='gaining_muscle')
    btn3 = types.InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ',
                                      callback_data='maintenance')
    markup.add(btn1, btn2, btn3)
    bot.send_message(call.message.chat.id, '–ö–∞–∫–∞—è —Ü–µ–ª—å?', reply_markup=markup)


@bot.callback_query_handler(func = lambda call: call.data=='start')
def calorie(call):
    get_info(call.message)

@bot.callback_query_handler(func = lambda call: call.data=='nutrient')
def nutr(call):
    product_list(call.message)

@bot.message_handler(commands=['calorie'])
def get_info(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç.')
    bot.register_next_step_handler(message, get_age)


@bot.message_handler(commands=['products'])
def product_list(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton('–ì–¥–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –±–µ–ª–æ–∫?', callback_data='nutr_protein')
    btn2 = types.InlineKeyboardButton('–ì–¥–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –∂–∏—Ä—ã?', callback_data='nutr_fats')
    btn3 = types.InlineKeyboardButton('–ì–¥–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —É–≥–ª–µ–≤–æ–¥—ã?', callback_data='nutr_carbs')
    markup.add(btn1, btn2, btn3)
    text = load_message('nutrients')
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('nutr_'))
def give_list(call):
    file_name = call.data.split('_')[-1]
    text = load_message(file_name)
    photo = open(' resourses/images/'+file_name+'.jpg', 'rb')
    markup =create_initial_buttons()
    bot.send_photo(call.message.chat.id, photo)
    bot.send_message(call.message.chat.id, text)
    bot.send_message(call.message.chat.id,'–ù–∞–¥–µ—é—Å—å –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ!üôÇ', reply_markup=markup)



@bot.callback_query_handler(func=lambda call: True)
def calculate_calorie(call):
    global norm
    if call.data == 'weight_loss':
        norm[0] = round(0.75 * base, 2)
        norm[1] = round(0.85 * base, 2)
        protein[1] = round(norm[0] / 4 * 0.3, 2)
        protein[2] = round(norm[1] / 4 * 0.3, 2)
        fiber[1] = round(norm[0] / 9 * 0.25, 2)
        fiber[2] = round(norm[1] / 9 * 0.3, 2)
        carbs[1] = round(norm[0] / 4 * 0.4, 2)
        carbs[2] = round(norm[1] / 4 * 0.45, 2)
    elif call.data == 'gaining_muscle':
        norm[0] = round(1.15 * base, 2)
        norm[1] = round(1.2 * base, 2)
        protein[1] = round(norm[0] / 4 * 0.3, 2)
        protein[2] = round(norm[1] / 4 * 0.35, 2)
        fiber[1] = round(norm[0] / 9 * 0.25, 2)
        fiber[2] = round(norm[1] / 9 * 0.3, 2)
        carbs[1] = round(norm[0] / 4 * 0.45, 2)
        carbs[2] = round(norm[1] / 4 * 0.55, 2)
    else:
        norm[0] = round(0.95 * base, 2)
        norm[1] = round(1.05 * base, 2)
        protein[1] = round(norm[0] / 4 * 0.3, 2)
        protein[2] = round(norm[1] / 4 * 0.3, 2)
        fiber[1] = round(norm[0] / 9 * 0.3, 2)
        fiber[2] = round(norm[1] / 9 * 0.3, 2)
        carbs[1] = round(norm[0] / 4 * 0.4, 2)
        carbs[2] = round(norm[1] / 4 * 0.4, 2)

    bot.send_message(call.message.chat.id, f'–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {base} –∫–∫–∞–ª\n'
                                           f'–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º: {mini_cal} –∫–∫–∞–ª\n'

                                           f'–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–Ω–∏—è —Ü–µ–ª–∏: {norm[0]} - {norm[1]} –∫–∫–∞–ª\n'
                                           f'–ë–ñ–£:\n' +
                     'ü•©–±–µ–ª–∫–∏ü•©' + f'\n\t\t\t\t–º–∏–Ω–∏–º–∞–ª—å–Ω–æ: {protein[0]} –≥.\n\t\t\t\t—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ: {protein[1]} - {protein[2]} –≥\n'
                                 'üå∞–∂–∏—Ä—ãüå∞' + f'\n\t\t\t\t–º–∏–Ω–∏–º–∞–ª—å–Ω–æ: {fiber[0]} –≥.\n\t\t\t\t—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ: {fiber[1]} - {fiber[2]} –≥\n'
                                            'ü•î—É–≥–ª–µ–≤–æ–¥—ãü•î' + f'\n\t\t\t\t–º–∏–Ω–∏–º–∞–ª—å–Ω–æ: {carbs[0]} –≥.\n\t\t\t\t—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ: {carbs[1]} - {carbs[2]} –≥')
    markup = create_initial_buttons()
    bot.send_message(call.message.chat.id, '–£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏!ü§û\n', reply_markup=markup)

bot.polling(none_stop=True)
